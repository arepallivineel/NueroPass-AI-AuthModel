{"ast":null,"code":"var _jsxFileName = \"/Users/vineel/Desktop/NueroPass/frontend/src/Components/Voiceandtextverify/Voiceandtextverify.js\",\n  _s = $RefreshSig$();\n// write a function that return \"voiceandtextverify\" message \n\nimport React, { useState, useEffect, useRef } from 'react';\nimport './Voiceandtextverify.css';\nimport { useNavigate } from 'react-router-dom';\nimport { securityQuestions } from '../../assets/securityQuestions.js';\nimport voice1File from '../../assets/voice1.wav';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Voiceandtextverify() {\n  _s();\n  const navigate = useNavigate();\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [selectedAnswer, setSelectedAnswer] = useState('');\n  const [verificationStatus, setVerificationStatus] = useState(null);\n  const [isRecording, setIsRecording] = useState(false);\n  const [recordingComplete, setRecordingComplete] = useState(false);\n  const [voiceMatchStatus, setVoiceMatchStatus] = useState(null);\n  const [audioBlob, setAudioBlob] = useState(null);\n  const mediaRecorderRef = useRef(null);\n  const audioChunksRef = useRef([]);\n  useEffect(() => {\n    // Randomly select a question when component mounts\n    const randomIndex = Math.floor(Math.random() * securityQuestions.length);\n    setCurrentQuestion(securityQuestions[randomIndex]);\n  }, []);\n  const handleAnswerSelect = option => {\n    setSelectedAnswer(option);\n  };\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      mediaRecorderRef.current = new MediaRecorder(stream);\n      audioChunksRef.current = [];\n      mediaRecorderRef.current.ondataavailable = event => {\n        if (event.data.size > 0) {\n          audioChunksRef.current.push(event.data);\n        }\n      };\n      mediaRecorderRef.current.onstop = () => {\n        const blob = new Blob(audioChunksRef.current, {\n          type: 'audio/wav'\n        });\n        setAudioBlob(blob);\n        setRecordingComplete(true);\n\n        // Stop all audio tracks\n        stream.getTracks().forEach(track => track.stop());\n      };\n      mediaRecorderRef.current.start();\n      setIsRecording(true);\n      setRecordingComplete(false);\n      setAudioBlob(null);\n      setVoiceMatchStatus(null);\n    } catch (error) {\n      console.error('Error accessing microphone:', error);\n      alert('Error accessing microphone. Please ensure microphone permissions are granted.');\n    }\n  };\n  const stopRecording = () => {\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {\n      mediaRecorderRef.current.stop();\n      setIsRecording(false);\n    }\n  };\n  const handleVoiceVerification = async () => {\n    if (!audioBlob) {\n      alert('Please record your voice first');\n      return;\n    }\n    try {\n      const formData = new FormData();\n\n      // Fetch the voice1.wav file and add it to formData\n      const voice1Response = await fetch(voice1File);\n      const voice1Blob = await voice1Response.blob();\n      formData.append('file1', voice1Blob);\n\n      // Add the newly recorded voice2\n      formData.append('file2', audioBlob);\n      const response = await fetch('http://127.0.0.1:8000/voice_similarity/', {\n        method: 'POST',\n        body: formData\n      });\n      const result = await response.json();\n      const isVoiceMatch = result.result === 1;\n      setVoiceMatchStatus(isVoiceMatch ? 'success' : 'failed');\n      if (isVoiceMatch && verificationStatus === 'success') {\n        setTimeout(() => {\n          navigate('/dashboard');\n        }, 2000);\n      }\n    } catch (error) {\n      console.error('Error during voice verification:', error);\n      setVoiceMatchStatus('failed');\n    }\n  };\n  const handleVerify = () => {\n    if (!selectedAnswer) {\n      alert('Please select an answer');\n      return;\n    }\n    if (currentQuestion.answer === selectedAnswer) {\n      setVerificationStatus('success');\n      if (voiceMatchStatus === 'success') {\n        setTimeout(() => {\n          navigate('/dashboard');\n        }, 2000);\n      }\n    } else {\n      setVerificationStatus('failed');\n    }\n  };\n  if (!currentQuestion) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"voiceandtextverify-container\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"voiceandtextverify-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Voice and Text Verification\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"verification-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"1. Security Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: currentQuestion.question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"options-container\",\n          children: currentQuestion.options.map((option, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `option-button ${selectedAnswer === option ? 'selected' : ''}`,\n            onClick: () => handleAnswerSelect(option),\n            children: option\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"verify-button\",\n        onClick: handleVerify,\n        children: \"Verify Answer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, this), verificationStatus && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `status-message ${verificationStatus}`,\n        children: verificationStatus === 'success' ? 'Security question verified successfully!' : 'Incorrect answer. Please try again.'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"verification-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"2. Voice Verification\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"voice-instruction\",\n        children: \"Please record your voice for verification\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"recording-controls\",\n        children: [!isRecording ? /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"record-button\",\n          onClick: startRecording,\n          disabled: isRecording,\n          children: \"Start Recording\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"record-button recording\",\n          onClick: stopRecording,\n          children: \"Stop Recording\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 25\n        }, this), recordingComplete && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"submit-button\",\n          onClick: handleVoiceVerification,\n          children: \"Submit Voice Recording\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }, this), recordingComplete && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"recording-status\",\n        children: \"Recording complete! Click submit to verify.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 21\n      }, this), voiceMatchStatus && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `status-message ${voiceMatchStatus}`,\n        children: voiceMatchStatus === 'success' ? 'Voice verification successful!' : 'Voice verification failed. Please try again.'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }, this), verificationStatus === 'success' && voiceMatchStatus === 'success' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"final-status success\",\n      children: \"Fund transfer successful! Redirecting to dashboard...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 9\n  }, this);\n}\n_s(Voiceandtextverify, \"sZrzVDtbEW2V3Vdg8gMZXOWZtbw=\", false, function () {\n  return [useNavigate];\n});\n_c = Voiceandtextverify;\nexport default Voiceandtextverify;\nvar _c;\n$RefreshReg$(_c, \"Voiceandtextverify\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useNavigate","securityQuestions","voice1File","jsxDEV","_jsxDEV","Voiceandtextverify","_s","navigate","currentQuestion","setCurrentQuestion","selectedAnswer","setSelectedAnswer","verificationStatus","setVerificationStatus","isRecording","setIsRecording","recordingComplete","setRecordingComplete","voiceMatchStatus","setVoiceMatchStatus","audioBlob","setAudioBlob","mediaRecorderRef","audioChunksRef","randomIndex","Math","floor","random","length","handleAnswerSelect","option","startRecording","stream","navigator","mediaDevices","getUserMedia","audio","current","MediaRecorder","ondataavailable","event","data","size","push","onstop","blob","Blob","type","getTracks","forEach","track","stop","start","error","console","alert","stopRecording","state","handleVoiceVerification","formData","FormData","voice1Response","fetch","voice1Blob","append","response","method","body","result","json","isVoiceMatch","setTimeout","handleVerify","answer","className","children","fileName","_jsxFileName","lineNumber","columnNumber","question","options","map","index","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/vineel/Desktop/NueroPass/frontend/src/Components/Voiceandtextverify/Voiceandtextverify.js"],"sourcesContent":["// write a function that return \"voiceandtextverify\" message \n\nimport React, { useState, useEffect, useRef } from 'react';\nimport './Voiceandtextverify.css';\nimport { useNavigate } from 'react-router-dom';\nimport { securityQuestions } from '../../assets/securityQuestions.js';\nimport voice1File from '../../assets/voice1.wav';\n\nfunction Voiceandtextverify() {\n    const navigate = useNavigate();\n    const [currentQuestion, setCurrentQuestion] = useState(null);\n    const [selectedAnswer, setSelectedAnswer] = useState('');\n    const [verificationStatus, setVerificationStatus] = useState(null);\n    const [isRecording, setIsRecording] = useState(false);\n    const [recordingComplete, setRecordingComplete] = useState(false);\n    const [voiceMatchStatus, setVoiceMatchStatus] = useState(null);\n    const [audioBlob, setAudioBlob] = useState(null);\n    const mediaRecorderRef = useRef(null);\n    const audioChunksRef = useRef([]);\n\n    useEffect(() => {\n        // Randomly select a question when component mounts\n        const randomIndex = Math.floor(Math.random() * securityQuestions.length);\n        setCurrentQuestion(securityQuestions[randomIndex]);\n    }, []);\n\n    const handleAnswerSelect = (option) => {\n        setSelectedAnswer(option);\n    };\n\n    const startRecording = async () => {\n        try {\n            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n            mediaRecorderRef.current = new MediaRecorder(stream);\n            audioChunksRef.current = [];\n\n            mediaRecorderRef.current.ondataavailable = (event) => {\n                if (event.data.size > 0) {\n                    audioChunksRef.current.push(event.data);\n                }\n            };\n\n            mediaRecorderRef.current.onstop = () => {\n                const blob = new Blob(audioChunksRef.current, { type: 'audio/wav' });\n                setAudioBlob(blob);\n                setRecordingComplete(true);\n                \n                // Stop all audio tracks\n                stream.getTracks().forEach(track => track.stop());\n            };\n\n            mediaRecorderRef.current.start();\n            setIsRecording(true);\n            setRecordingComplete(false);\n            setAudioBlob(null);\n            setVoiceMatchStatus(null);\n        } catch (error) {\n            console.error('Error accessing microphone:', error);\n            alert('Error accessing microphone. Please ensure microphone permissions are granted.');\n        }\n    };\n\n    const stopRecording = () => {\n        if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {\n            mediaRecorderRef.current.stop();\n            setIsRecording(false);\n        }\n    };\n\n    const handleVoiceVerification = async () => {\n        if (!audioBlob) {\n            alert('Please record your voice first');\n            return;\n        }\n    \n        try {\n            const formData = new FormData();\n            \n            // Fetch the voice1.wav file and add it to formData\n            const voice1Response = await fetch(voice1File);\n            const voice1Blob = await voice1Response.blob();\n            formData.append('file1', voice1Blob);\n            \n            // Add the newly recorded voice2\n            formData.append('file2', audioBlob);\n    \n            const response = await fetch('http://127.0.0.1:8000/voice_similarity/', {\n                method: 'POST',\n                body: formData\n            });\n    \n            const result = await response.json();\n    \n            const isVoiceMatch = result.result === 1;\n            setVoiceMatchStatus(isVoiceMatch ? 'success' : 'failed');\n    \n            if (isVoiceMatch && verificationStatus === 'success') {\n                setTimeout(() => {\n                    navigate('/dashboard');\n                }, 2000);\n            }\n        } catch (error) {\n            console.error('Error during voice verification:', error);\n            setVoiceMatchStatus('failed');\n        }\n    };\n\n    const handleVerify = () => {\n        if (!selectedAnswer) {\n            alert('Please select an answer');\n            return;\n        }\n\n        if (currentQuestion.answer === selectedAnswer) {\n            setVerificationStatus('success');\n            if (voiceMatchStatus === 'success') {\n                setTimeout(() => {\n                    navigate('/dashboard');\n                }, 2000);\n            }\n        } else {\n            setVerificationStatus('failed');\n        }\n    };\n\n    if (!currentQuestion) {\n        return <div className=\"voiceandtextverify-container\">Loading...</div>;\n    }\n\n    return (\n        <div className=\"voiceandtextverify-container\">\n            <h2>Voice and Text Verification</h2>\n            \n            <div className=\"verification-section\">\n                <h3>1. Security Question</h3>\n                <div className=\"question-section\">\n                    <h4>{currentQuestion.question}</h4>\n                    <div className=\"options-container\">\n                        {currentQuestion.options.map((option, index) => (\n                            <button\n                                key={index}\n                                className={`option-button ${selectedAnswer === option ? 'selected' : ''}`}\n                                onClick={() => handleAnswerSelect(option)}\n                            >\n                                {option}\n                            </button>\n                        ))}\n                    </div>\n                </div>\n                <button className=\"verify-button\" onClick={handleVerify}>\n                    Verify Answer\n                </button>\n                {verificationStatus && (\n                    <div className={`status-message ${verificationStatus}`}>\n                        {verificationStatus === 'success' \n                            ? 'Security question verified successfully!' \n                            : 'Incorrect answer. Please try again.'}\n                    </div>\n                )}\n            </div>\n\n            <div className=\"verification-section\">\n                <h3>2. Voice Verification</h3>\n                <p className=\"voice-instruction\">Please record your voice for verification</p>\n                <div className=\"recording-controls\">\n                    {!isRecording ? (\n                        <button \n                            className=\"record-button\"\n                            onClick={startRecording}\n                            disabled={isRecording}\n                        >\n                            Start Recording\n                        </button>\n                    ) : (\n                        <button \n                            className=\"record-button recording\"\n                            onClick={stopRecording}\n                        >\n                            Stop Recording\n                        </button>\n                    )}\n                    {recordingComplete && (\n                        <button \n                            className=\"submit-button\"\n                            onClick={handleVoiceVerification}\n                        >\n                            Submit Voice Recording\n                        </button>\n                    )}\n                </div>\n                {recordingComplete && (\n                    <div className=\"recording-status\">Recording complete! Click submit to verify.</div>\n                )}\n                {voiceMatchStatus && (\n                    <div className={`status-message ${voiceMatchStatus}`}>\n                        {voiceMatchStatus === 'success' \n                            ? 'Voice verification successful!' \n                            : 'Voice verification failed. Please try again.'}\n                    </div>\n                )}\n            </div>\n\n            {verificationStatus === 'success' && voiceMatchStatus === 'success' && (\n                <div className=\"final-status success\">\n                    Fund transfer successful! Redirecting to dashboard...\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default Voiceandtextverify;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}