{"ast":null,"code":"var _jsxFileName = \"/Users/vineel/Desktop/NueroPass/frontend/src/Components/Textverify/Textverify.js\",\n  _s = $RefreshSig$();\n// write a function that return \"textverify\" message \nimport React, { useState, useEffect } from 'react';\nimport './Textverify.css';\nimport { useNavigate } from 'react-router-dom';\nimport { securityQuestions } from '../../assets/securityQuestions.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Textverify() {\n  _s();\n  const navigate = useNavigate();\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [selectedAnswer, setSelectedAnswer] = useState('');\n  const [verificationStatus, setVerificationStatus] = useState(null);\n  const [usedQuestions, setUsedQuestions] = useState(new Set());\n  const getRandomQuestion = () => {\n    const availableQuestions = securityQuestions.filter(q => !usedQuestions.has(q.question));\n\n    // If all questions have been used, reset the used questions set\n    if (availableQuestions.length === 0) {\n      setUsedQuestions(new Set());\n      return securityQuestions[Math.floor(Math.random() * securityQuestions.length)];\n    }\n    const randomIndex = Math.floor(Math.random() * availableQuestions.length);\n    const newQuestion = availableQuestions[randomIndex];\n\n    // Add the question to used questions set\n    setUsedQuestions(prev => new Set([...prev, newQuestion.question]));\n    return newQuestion;\n  };\n  useEffect(() => {\n    // Set initial question\n    setCurrentQuestion(getRandomQuestion());\n  }, []);\n  const handleAnswerSelect = option => {\n    setSelectedAnswer(option);\n    setVerificationStatus(null); // Clear previous status when new answer is selected\n  };\n  const handleVerify = () => {\n    if (!selectedAnswer) {\n      alert('Please select an answer');\n      return;\n    }\n    if (currentQuestion.answer === selectedAnswer) {\n      setVerificationStatus('success');\n      setTimeout(() => {\n        navigate('/dashboard');\n      }, 2000); // Reduced timeout to 2 seconds for better UX\n    } else {\n      setVerificationStatus('failed');\n      // Wait for a short delay before showing new question\n      setTimeout(() => {\n        setCurrentQuestion(getRandomQuestion());\n        setSelectedAnswer('');\n        setVerificationStatus(null);\n      }, 1500); // Show error message for 1.5 seconds before refreshing\n    }\n  };\n  if (!currentQuestion) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"textverify-container\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"textverify-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Security Verification\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: currentQuestion.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"options-container\",\n        children: currentQuestion.options.map((option, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `option-button ${selectedAnswer === option ? 'selected' : ''}`,\n          onClick: () => handleAnswerSelect(option),\n          disabled: verificationStatus === 'success',\n          children: option\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"verify-button\",\n      onClick: handleVerify,\n      disabled: verificationStatus === 'success',\n      children: \"Verify\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), verificationStatus && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `status-message ${verificationStatus}`,\n      children: verificationStatus === 'success' ? 'Fund transfer successful! Redirecting...' : 'Verification failed. Loading new question...'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n}\n_s(Textverify, \"txzyYiAprlIxW5JhhWqOLHuVmUw=\", false, function () {\n  return [useNavigate];\n});\n_c = Textverify;\nexport default Textverify;\nvar _c;\n$RefreshReg$(_c, \"Textverify\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","securityQuestions","jsxDEV","_jsxDEV","Textverify","_s","navigate","currentQuestion","setCurrentQuestion","selectedAnswer","setSelectedAnswer","verificationStatus","setVerificationStatus","usedQuestions","setUsedQuestions","Set","getRandomQuestion","availableQuestions","filter","q","has","question","length","Math","floor","random","randomIndex","newQuestion","prev","handleAnswerSelect","option","handleVerify","alert","answer","setTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","options","map","index","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/vineel/Desktop/NueroPass/frontend/src/Components/Textverify/Textverify.js"],"sourcesContent":["// write a function that return \"textverify\" message \nimport React, { useState, useEffect } from 'react';\nimport './Textverify.css';\nimport { useNavigate } from 'react-router-dom';\nimport { securityQuestions } from '../../assets/securityQuestions.js';\n\nfunction Textverify() {\n    const navigate = useNavigate();\n    const [currentQuestion, setCurrentQuestion] = useState(null);\n    const [selectedAnswer, setSelectedAnswer] = useState('');\n    const [verificationStatus, setVerificationStatus] = useState(null);\n    const [usedQuestions, setUsedQuestions] = useState(new Set());\n    \n    const getRandomQuestion = () => {\n        const availableQuestions = securityQuestions.filter(q => !usedQuestions.has(q.question));\n        \n        // If all questions have been used, reset the used questions set\n        if (availableQuestions.length === 0) {\n            setUsedQuestions(new Set());\n            return securityQuestions[Math.floor(Math.random() * securityQuestions.length)];\n        }\n        \n        const randomIndex = Math.floor(Math.random() * availableQuestions.length);\n        const newQuestion = availableQuestions[randomIndex];\n        \n        // Add the question to used questions set\n        setUsedQuestions(prev => new Set([...prev, newQuestion.question]));\n        \n        return newQuestion;\n    };\n\n    useEffect(() => {\n        // Set initial question\n        setCurrentQuestion(getRandomQuestion());\n    }, []);\n\n    const handleAnswerSelect = (option) => {\n        setSelectedAnswer(option);\n        setVerificationStatus(null); // Clear previous status when new answer is selected\n    };\n    \n    const handleVerify = () => {\n        if (!selectedAnswer) {\n            alert('Please select an answer');\n            return;\n        }\n\n        if (currentQuestion.answer === selectedAnswer) {\n            setVerificationStatus('success');\n            setTimeout(() => {\n                navigate('/dashboard');\n            }, 2000); // Reduced timeout to 2 seconds for better UX\n        } else {\n            setVerificationStatus('failed');\n            // Wait for a short delay before showing new question\n            setTimeout(() => {\n                setCurrentQuestion(getRandomQuestion());\n                setSelectedAnswer('');\n                setVerificationStatus(null);\n            }, 1500); // Show error message for 1.5 seconds before refreshing\n        }\n    };\n    \n    if (!currentQuestion) {\n        return <div className=\"textverify-container\">Loading...</div>;\n    }\n\n    return (\n        <div className=\"textverify-container\">\n            <h2>Security Verification</h2>\n            <div className=\"question-section\">\n                <h3>{currentQuestion.question}</h3>\n                <div className=\"options-container\">\n                    {currentQuestion.options.map((option, index) => (\n                        <button\n                            key={index}\n                            className={`option-button ${selectedAnswer === option ? 'selected' : ''}`}\n                            onClick={() => handleAnswerSelect(option)}\n                            disabled={verificationStatus === 'success'}\n                        >\n                            {option}\n                        </button>\n                    ))}\n                </div>\n            </div>\n            <button \n                className=\"verify-button\" \n                onClick={handleVerify}\n                disabled={verificationStatus === 'success'}\n            >\n                Verify\n            </button>\n            {verificationStatus && (\n                <div className={`status-message ${verificationStatus}`}>\n                    {verificationStatus === 'success' \n                        ? 'Fund transfer successful! Redirecting...' \n                        : 'Verification failed. Loading new question...'}\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default Textverify;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}