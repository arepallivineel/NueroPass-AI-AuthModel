{"ast":null,"code":"var _jsxFileName = \"/Users/vineel/Desktop/NueroPass/frontend/src/Components/Textverify/Textverify.js\",\n  _s = $RefreshSig$();\n// write a function that return \"textverify\" message \nimport React, { useState, useEffect } from 'react';\nimport './Textverify.css';\nimport { useNavigate } from 'react-router-dom';\nimport { securityQuestions } from '../../assets/securityQuestions.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Textverify() {\n  _s();\n  const navigate = useNavigate();\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [selectedAnswer, setSelectedAnswer] = useState('');\n  const [verificationStatus, setVerificationStatus] = useState(null);\n  const [usedQuestions, setUsedQuestions] = useState(new Set());\n  const [attempts, setAttempts] = useState(0);\n  const MAX_ATTEMPTS = 3;\n  const getRandomQuestion = () => {\n    const availableQuestions = securityQuestions.filter(q => !usedQuestions.has(q.question));\n\n    // If all questions have been used, reset the used questions set\n    if (availableQuestions.length === 0) {\n      setUsedQuestions(new Set());\n      return securityQuestions[Math.floor(Math.random() * securityQuestions.length)];\n    }\n    const randomIndex = Math.floor(Math.random() * availableQuestions.length);\n    const newQuestion = availableQuestions[randomIndex];\n\n    // Add the question to used questions set\n    setUsedQuestions(prev => new Set([...prev, newQuestion.question]));\n    return newQuestion;\n  };\n  useEffect(() => {\n    // Set initial question\n    setCurrentQuestion(getRandomQuestion());\n  }, []);\n  const handleAnswerSelect = option => {\n    setSelectedAnswer(option);\n    setVerificationStatus(null); // Clear previous status when new answer is selected\n  };\n  const handleVerify = () => {\n    if (!selectedAnswer) {\n      alert('Please select an answer');\n      return;\n    }\n    if (currentQuestion.answer === selectedAnswer) {\n      setVerificationStatus('success');\n      setTimeout(() => {\n        navigate('/dashboard');\n      }, 2000); // Reduced timeout to 2 seconds for better UX\n    } else {\n      const newAttempts = attempts + 1;\n      setAttempts(newAttempts);\n      if (newAttempts >= MAX_ATTEMPTS) {\n        setVerificationStatus('aborted');\n        // Redirect to dashboard after showing the aborted message\n        setTimeout(() => {\n          navigate('/dashboard');\n        }, 3000);\n        return;\n      }\n      setVerificationStatus('failed');\n      // Wait for a short delay before showing new question\n      setTimeout(() => {\n        setCurrentQuestion(getRandomQuestion());\n        setSelectedAnswer('');\n        setVerificationStatus(null);\n      }, 1500); // Show error message for 1.5 seconds before refreshing\n    }\n  };\n  if (!currentQuestion) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"textverify-container\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"textverify-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Security Verification\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), attempts < MAX_ATTEMPTS && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"attempts-info\",\n      children: [\"Attempts remaining: \", MAX_ATTEMPTS - attempts]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: currentQuestion.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"options-container\",\n        children: currentQuestion.options.map((option, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `option-button ${selectedAnswer === option ? 'selected' : ''}`,\n          onClick: () => handleAnswerSelect(option),\n          disabled: verificationStatus === 'success' || verificationStatus === 'aborted',\n          children: option\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"verify-button\",\n      onClick: handleVerify,\n      disabled: verificationStatus === 'success' || verificationStatus === 'aborted',\n      children: \"Verify\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this), verificationStatus && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `status-message ${verificationStatus}`,\n      children: verificationStatus === 'success' ? 'Fund transfer successful! Redirecting...' : verificationStatus === 'aborted' ? 'VERIFICATION FAILED. TRANSACTION ABORTED!' : 'Verification failed. Loading new question...'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n}\n_s(Textverify, \"l9nXrlBqXlrvUp5kZLPxqSnT/Vw=\", false, function () {\n  return [useNavigate];\n});\n_c = Textverify;\nexport default Textverify;\nvar _c;\n$RefreshReg$(_c, \"Textverify\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","securityQuestions","jsxDEV","_jsxDEV","Textverify","_s","navigate","currentQuestion","setCurrentQuestion","selectedAnswer","setSelectedAnswer","verificationStatus","setVerificationStatus","usedQuestions","setUsedQuestions","Set","attempts","setAttempts","MAX_ATTEMPTS","getRandomQuestion","availableQuestions","filter","q","has","question","length","Math","floor","random","randomIndex","newQuestion","prev","handleAnswerSelect","option","handleVerify","alert","answer","setTimeout","newAttempts","className","children","fileName","_jsxFileName","lineNumber","columnNumber","options","map","index","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/vineel/Desktop/NueroPass/frontend/src/Components/Textverify/Textverify.js"],"sourcesContent":["// write a function that return \"textverify\" message \nimport React, { useState, useEffect } from 'react';\nimport './Textverify.css';\nimport { useNavigate } from 'react-router-dom';\nimport { securityQuestions } from '../../assets/securityQuestions.js';\n\nfunction Textverify() {\n    const navigate = useNavigate();\n    const [currentQuestion, setCurrentQuestion] = useState(null);\n    const [selectedAnswer, setSelectedAnswer] = useState('');\n    const [verificationStatus, setVerificationStatus] = useState(null);\n    const [usedQuestions, setUsedQuestions] = useState(new Set());\n    const [attempts, setAttempts] = useState(0);\n    const MAX_ATTEMPTS = 3;\n    \n    const getRandomQuestion = () => {\n        const availableQuestions = securityQuestions.filter(q => !usedQuestions.has(q.question));\n        \n        // If all questions have been used, reset the used questions set\n        if (availableQuestions.length === 0) {\n            setUsedQuestions(new Set());\n            return securityQuestions[Math.floor(Math.random() * securityQuestions.length)];\n        }\n        \n        const randomIndex = Math.floor(Math.random() * availableQuestions.length);\n        const newQuestion = availableQuestions[randomIndex];\n        \n        // Add the question to used questions set\n        setUsedQuestions(prev => new Set([...prev, newQuestion.question]));\n        \n        return newQuestion;\n    };\n\n    useEffect(() => {\n        // Set initial question\n        setCurrentQuestion(getRandomQuestion());\n    }, []);\n\n    const handleAnswerSelect = (option) => {\n        setSelectedAnswer(option);\n        setVerificationStatus(null); // Clear previous status when new answer is selected\n    };\n    \n    const handleVerify = () => {\n        if (!selectedAnswer) {\n            alert('Please select an answer');\n            return;\n        }\n\n        if (currentQuestion.answer === selectedAnswer) {\n            setVerificationStatus('success');\n            setTimeout(() => {\n                navigate('/dashboard');\n            }, 2000); // Reduced timeout to 2 seconds for better UX\n        } else {\n            const newAttempts = attempts + 1;\n            setAttempts(newAttempts);\n            \n            if (newAttempts >= MAX_ATTEMPTS) {\n                setVerificationStatus('aborted');\n                // Redirect to dashboard after showing the aborted message\n                setTimeout(() => {\n                    navigate('/dashboard');\n                }, 3000);\n                return;\n            }\n\n            setVerificationStatus('failed');\n            // Wait for a short delay before showing new question\n            setTimeout(() => {\n                setCurrentQuestion(getRandomQuestion());\n                setSelectedAnswer('');\n                setVerificationStatus(null);\n            }, 1500); // Show error message for 1.5 seconds before refreshing\n        }\n    };\n    \n    if (!currentQuestion) {\n        return <div className=\"textverify-container\">Loading...</div>;\n    }\n\n    return (\n        <div className=\"textverify-container\">\n            <h2>Security Verification</h2>\n            {attempts < MAX_ATTEMPTS && (\n                <div className=\"attempts-info\">\n                    Attempts remaining: {MAX_ATTEMPTS - attempts}\n                </div>\n            )}\n            <div className=\"question-section\">\n                <h3>{currentQuestion.question}</h3>\n                <div className=\"options-container\">\n                    {currentQuestion.options.map((option, index) => (\n                        <button\n                            key={index}\n                            className={`option-button ${selectedAnswer === option ? 'selected' : ''}`}\n                            onClick={() => handleAnswerSelect(option)}\n                            disabled={verificationStatus === 'success' || verificationStatus === 'aborted'}\n                        >\n                            {option}\n                        </button>\n                    ))}\n                </div>\n            </div>\n            <button \n                className=\"verify-button\" \n                onClick={handleVerify}\n                disabled={verificationStatus === 'success' || verificationStatus === 'aborted'}\n            >\n                Verify\n            </button>\n            {verificationStatus && (\n                <div className={`status-message ${verificationStatus}`}>\n                    {verificationStatus === 'success' \n                        ? 'Fund transfer successful! Redirecting...' \n                        : verificationStatus === 'aborted'\n                        ? 'VERIFICATION FAILED. TRANSACTION ABORTED!'\n                        : 'Verification failed. Loading new question...'}\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default Textverify;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}