{"ast":null,"code":"var _jsxFileName = \"/Users/vineel/Desktop/NueroPass/frontend/src/Components/Voiceandtextverify/Voiceandtextverify.js\",\n  _s = $RefreshSig$();\n// write a function that return \"voiceandtextverify\" message \n\nimport React, { useState, useEffect, useRef } from 'react';\nimport './Voiceandtextverify.css';\nimport { useNavigate } from 'react-router-dom';\nimport { securityQuestions } from '../../assets/securityQuestions.js';\nimport voice1File from '../../assets/voice1.wav';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Voiceandtextverify() {\n  _s();\n  const navigate = useNavigate();\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [selectedAnswer, setSelectedAnswer] = useState('');\n  const [verificationStatus, setVerificationStatus] = useState(null);\n  const [isRecording, setIsRecording] = useState(false);\n  const [recordingComplete, setRecordingComplete] = useState(false);\n  const [voiceMatchStatus, setVoiceMatchStatus] = useState(null);\n  const [audioBlob, setAudioBlob] = useState(null);\n  const [attempts, setAttempts] = useState(0);\n  const [usedQuestions, setUsedQuestions] = useState(new Set());\n  const mediaRecorderRef = useRef(null);\n  const audioChunksRef = useRef([]);\n  const MAX_ATTEMPTS = 3;\n  const getRandomQuestion = () => {\n    const availableQuestions = securityQuestions.filter(q => !usedQuestions.has(q.question));\n\n    // If all questions have been used, reset the used questions set\n    if (availableQuestions.length === 0) {\n      setUsedQuestions(new Set());\n      return securityQuestions[Math.floor(Math.random() * securityQuestions.length)];\n    }\n    const randomIndex = Math.floor(Math.random() * availableQuestions.length);\n    const newQuestion = availableQuestions[randomIndex];\n\n    // Add the question to used questions set\n    setUsedQuestions(prev => new Set([...prev, newQuestion.question]));\n    return newQuestion;\n  };\n  useEffect(() => {\n    setCurrentQuestion(getRandomQuestion());\n  }, []);\n  const handleAnswerSelect = option => {\n    setSelectedAnswer(option);\n    setVerificationStatus(null);\n  };\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      mediaRecorderRef.current = new MediaRecorder(stream);\n      audioChunksRef.current = [];\n      mediaRecorderRef.current.ondataavailable = event => {\n        if (event.data.size > 0) {\n          audioChunksRef.current.push(event.data);\n        }\n      };\n      mediaRecorderRef.current.onstop = () => {\n        const blob = new Blob(audioChunksRef.current, {\n          type: 'audio/wav'\n        });\n        setAudioBlob(blob);\n        setRecordingComplete(true);\n\n        // Stop all audio tracks\n        stream.getTracks().forEach(track => track.stop());\n      };\n      mediaRecorderRef.current.start();\n      setIsRecording(true);\n      setRecordingComplete(false);\n      setAudioBlob(null);\n      setVoiceMatchStatus(null);\n    } catch (error) {\n      console.error('Error accessing microphone:', error);\n      alert('Error accessing microphone. Please ensure microphone permissions are granted.');\n    }\n  };\n  const stopRecording = () => {\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {\n      mediaRecorderRef.current.stop();\n      setIsRecording(false);\n    }\n  };\n  const handleVoiceVerification = async () => {\n    if (!audioBlob) {\n      alert('Please record your voice first');\n      return;\n    }\n    try {\n      const formData = new FormData();\n\n      // Fetch the voice1.wav file and add it to formData\n      const voice1Response = await fetch(voice1File);\n      const voice1Blob = await voice1Response.blob();\n      formData.append('file1', voice1Blob);\n\n      // Add the newly recorded voice2\n      formData.append('file2', audioBlob);\n      const response = await fetch('http://127.0.0.1:8000/voice_similarity/', {\n        method: 'POST',\n        body: formData\n      });\n      const result = await response.json();\n      const isVoiceMatch = result.result === 1;\n      setVoiceMatchStatus(isVoiceMatch ? 'success' : 'failed');\n      if (isVoiceMatch && verificationStatus === 'success') {\n        setTimeout(() => {\n          navigate('/dashboard');\n        }, 2000);\n      }\n    } catch (error) {\n      console.error('Error during voice verification:', error);\n      setVoiceMatchStatus('failed');\n    }\n  };\n  const handleVerify = () => {\n    if (!selectedAnswer) {\n      alert('Please select an answer');\n      return;\n    }\n    if (currentQuestion.answer === selectedAnswer) {\n      setVerificationStatus('success');\n      if (voiceMatchStatus === 'success') {\n        setTimeout(() => {\n          navigate('/dashboard');\n        }, 2000);\n      }\n    } else {\n      const newAttempts = attempts + 1;\n      setAttempts(newAttempts);\n      if (newAttempts >= MAX_ATTEMPTS) {\n        setVerificationStatus('aborted');\n        // Redirect to dashboard after showing the aborted message\n        setTimeout(() => {\n          navigate('/dashboard');\n        }, 3000);\n        return;\n      }\n      setVerificationStatus('failed');\n      // Wait for a short delay before showing new question\n      setTimeout(() => {\n        setCurrentQuestion(getRandomQuestion());\n        setSelectedAnswer('');\n        setVerificationStatus(null);\n      }, 1500);\n    }\n  };\n  if (!currentQuestion) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"voiceandtextverify-container\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"voiceandtextverify-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Voice and Text Verification\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }, this), attempts < MAX_ATTEMPTS && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"attempts-info\",\n      children: [\"Attempts remaining: \", MAX_ATTEMPTS - attempts]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"verification-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"1. Security Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: currentQuestion.question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"options-container\",\n          children: currentQuestion.options.map((option, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `option-button ${selectedAnswer === option ? 'selected' : ''}`,\n            onClick: () => handleAnswerSelect(option),\n            disabled: verificationStatus === 'aborted',\n            children: option\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"verify-button\",\n        onClick: handleVerify,\n        disabled: verificationStatus === 'aborted',\n        children: \"Verify Answer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 17\n      }, this), verificationStatus && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `status-message ${verificationStatus}`,\n        children: verificationStatus === 'success' ? 'Security question verified successfully!' : verificationStatus === 'aborted' ? 'VERIFICATION FAILED. TRANSACTION ABORTED!' : 'Incorrect answer. Loading new question...'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"verification-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"2. Voice Verification\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"voice-instruction\",\n        children: \"Please record your voice for verification\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"recording-controls\",\n        children: [!isRecording ? /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"record-button\",\n          onClick: startRecording,\n          disabled: isRecording || verificationStatus === 'aborted',\n          children: \"Start Recording\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"record-button recording\",\n          onClick: stopRecording,\n          disabled: verificationStatus === 'aborted',\n          children: \"Stop Recording\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 25\n        }, this), recordingComplete && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"submit-button\",\n          onClick: handleVoiceVerification,\n          disabled: verificationStatus === 'aborted',\n          children: \"Submit Voice Recording\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 17\n      }, this), recordingComplete && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"recording-status\",\n        children: \"Recording complete! Click submit to verify.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 21\n      }, this), voiceMatchStatus && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `status-message ${voiceMatchStatus}`,\n        children: voiceMatchStatus === 'success' ? 'Voice verification successful!' : 'Voice verification failed. Please try again.'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 9\n  }, this);\n}\n_s(Voiceandtextverify, \"m06ThYLlvs8zDVS73B7zdrR+JPQ=\", false, function () {\n  return [useNavigate];\n});\n_c = Voiceandtextverify;\nexport default Voiceandtextverify;\nvar _c;\n$RefreshReg$(_c, \"Voiceandtextverify\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useNavigate","securityQuestions","voice1File","jsxDEV","_jsxDEV","Voiceandtextverify","_s","navigate","currentQuestion","setCurrentQuestion","selectedAnswer","setSelectedAnswer","verificationStatus","setVerificationStatus","isRecording","setIsRecording","recordingComplete","setRecordingComplete","voiceMatchStatus","setVoiceMatchStatus","audioBlob","setAudioBlob","attempts","setAttempts","usedQuestions","setUsedQuestions","Set","mediaRecorderRef","audioChunksRef","MAX_ATTEMPTS","getRandomQuestion","availableQuestions","filter","q","has","question","length","Math","floor","random","randomIndex","newQuestion","prev","handleAnswerSelect","option","startRecording","stream","navigator","mediaDevices","getUserMedia","audio","current","MediaRecorder","ondataavailable","event","data","size","push","onstop","blob","Blob","type","getTracks","forEach","track","stop","start","error","console","alert","stopRecording","state","handleVoiceVerification","formData","FormData","voice1Response","fetch","voice1Blob","append","response","method","body","result","json","isVoiceMatch","setTimeout","handleVerify","answer","newAttempts","className","children","fileName","_jsxFileName","lineNumber","columnNumber","options","map","index","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/vineel/Desktop/NueroPass/frontend/src/Components/Voiceandtextverify/Voiceandtextverify.js"],"sourcesContent":["// write a function that return \"voiceandtextverify\" message \n\nimport React, { useState, useEffect, useRef } from 'react';\nimport './Voiceandtextverify.css';\nimport { useNavigate } from 'react-router-dom';\nimport { securityQuestions } from '../../assets/securityQuestions.js';\nimport voice1File from '../../assets/voice1.wav';\n\nfunction Voiceandtextverify() {\n    const navigate = useNavigate();\n    const [currentQuestion, setCurrentQuestion] = useState(null);\n    const [selectedAnswer, setSelectedAnswer] = useState('');\n    const [verificationStatus, setVerificationStatus] = useState(null);\n    const [isRecording, setIsRecording] = useState(false);\n    const [recordingComplete, setRecordingComplete] = useState(false);\n    const [voiceMatchStatus, setVoiceMatchStatus] = useState(null);\n    const [audioBlob, setAudioBlob] = useState(null);\n    const [attempts, setAttempts] = useState(0);\n    const [usedQuestions, setUsedQuestions] = useState(new Set());\n    const mediaRecorderRef = useRef(null);\n    const audioChunksRef = useRef([]);\n    const MAX_ATTEMPTS = 3;\n\n    const getRandomQuestion = () => {\n        const availableQuestions = securityQuestions.filter(q => !usedQuestions.has(q.question));\n        \n        // If all questions have been used, reset the used questions set\n        if (availableQuestions.length === 0) {\n            setUsedQuestions(new Set());\n            return securityQuestions[Math.floor(Math.random() * securityQuestions.length)];\n        }\n        \n        const randomIndex = Math.floor(Math.random() * availableQuestions.length);\n        const newQuestion = availableQuestions[randomIndex];\n        \n        // Add the question to used questions set\n        setUsedQuestions(prev => new Set([...prev, newQuestion.question]));\n        \n        return newQuestion;\n    };\n\n    useEffect(() => {\n        setCurrentQuestion(getRandomQuestion());\n    }, []);\n\n    const handleAnswerSelect = (option) => {\n        setSelectedAnswer(option);\n        setVerificationStatus(null);\n    };\n\n    const startRecording = async () => {\n        try {\n            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n            mediaRecorderRef.current = new MediaRecorder(stream);\n            audioChunksRef.current = [];\n\n            mediaRecorderRef.current.ondataavailable = (event) => {\n                if (event.data.size > 0) {\n                    audioChunksRef.current.push(event.data);\n                }\n            };\n\n            mediaRecorderRef.current.onstop = () => {\n                const blob = new Blob(audioChunksRef.current, { type: 'audio/wav' });\n                setAudioBlob(blob);\n                setRecordingComplete(true);\n                \n                // Stop all audio tracks\n                stream.getTracks().forEach(track => track.stop());\n            };\n\n            mediaRecorderRef.current.start();\n            setIsRecording(true);\n            setRecordingComplete(false);\n            setAudioBlob(null);\n            setVoiceMatchStatus(null);\n        } catch (error) {\n            console.error('Error accessing microphone:', error);\n            alert('Error accessing microphone. Please ensure microphone permissions are granted.');\n        }\n    };\n\n    const stopRecording = () => {\n        if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {\n            mediaRecorderRef.current.stop();\n            setIsRecording(false);\n        }\n    };\n\n    const handleVoiceVerification = async () => {\n        if (!audioBlob) {\n            alert('Please record your voice first');\n            return;\n        }\n    \n        try {\n            const formData = new FormData();\n            \n            // Fetch the voice1.wav file and add it to formData\n            const voice1Response = await fetch(voice1File);\n            const voice1Blob = await voice1Response.blob();\n            formData.append('file1', voice1Blob);\n            \n            // Add the newly recorded voice2\n            formData.append('file2', audioBlob);\n    \n            const response = await fetch('http://127.0.0.1:8000/voice_similarity/', {\n                method: 'POST',\n                body: formData\n            });\n    \n            const result = await response.json();\n    \n            const isVoiceMatch = result.result === 1;\n            setVoiceMatchStatus(isVoiceMatch ? 'success' : 'failed');\n    \n            if (isVoiceMatch && verificationStatus === 'success') {\n                setTimeout(() => {\n                    navigate('/dashboard');\n                }, 2000);\n            }\n        } catch (error) {\n            console.error('Error during voice verification:', error);\n            setVoiceMatchStatus('failed');\n        }\n    };\n\n    const handleVerify = () => {\n        if (!selectedAnswer) {\n            alert('Please select an answer');\n            return;\n        }\n\n        if (currentQuestion.answer === selectedAnswer) {\n            setVerificationStatus('success');\n            if (voiceMatchStatus === 'success') {\n                setTimeout(() => {\n                    navigate('/dashboard');\n                }, 2000);\n            }\n        } else {\n            const newAttempts = attempts + 1;\n            setAttempts(newAttempts);\n            \n            if (newAttempts >= MAX_ATTEMPTS) {\n                setVerificationStatus('aborted');\n                // Redirect to dashboard after showing the aborted message\n                setTimeout(() => {\n                    navigate('/dashboard');\n                }, 3000);\n                return;\n            }\n            \n            setVerificationStatus('failed');\n            // Wait for a short delay before showing new question\n            setTimeout(() => {\n                setCurrentQuestion(getRandomQuestion());\n                setSelectedAnswer('');\n                setVerificationStatus(null);\n            }, 1500);\n        }\n    };\n\n    if (!currentQuestion) {\n        return <div className=\"voiceandtextverify-container\">Loading...</div>;\n    }\n\n    return (\n        <div className=\"voiceandtextverify-container\">\n            <h2>Voice and Text Verification</h2>\n            \n            {attempts < MAX_ATTEMPTS && (\n                <div className=\"attempts-info\">\n                    Attempts remaining: {MAX_ATTEMPTS - attempts}\n                </div>\n            )}\n            \n            <div className=\"verification-section\">\n                <h3>1. Security Question</h3>\n                <div className=\"question-section\">\n                    <h4>{currentQuestion.question}</h4>\n                    <div className=\"options-container\">\n                        {currentQuestion.options.map((option, index) => (\n                            <button\n                                key={index}\n                                className={`option-button ${selectedAnswer === option ? 'selected' : ''}`}\n                                onClick={() => handleAnswerSelect(option)}\n                                disabled={verificationStatus === 'aborted'}\n                            >\n                                {option}\n                            </button>\n                        ))}\n                    </div>\n                </div>\n                <button \n                    className=\"verify-button\" \n                    onClick={handleVerify}\n                    disabled={verificationStatus === 'aborted'}\n                >\n                    Verify Answer\n                </button>\n                {verificationStatus && (\n                    <div className={`status-message ${verificationStatus}`}>\n                        {verificationStatus === 'success' \n                            ? 'Security question verified successfully!' \n                            : verificationStatus === 'aborted'\n                            ? 'VERIFICATION FAILED. TRANSACTION ABORTED!'\n                            : 'Incorrect answer. Loading new question...'}\n                    </div>\n                )}\n            </div>\n\n            <div className=\"verification-section\">\n                <h3>2. Voice Verification</h3>\n                <p className=\"voice-instruction\">Please record your voice for verification</p>\n                <div className=\"recording-controls\">\n                    {!isRecording ? (\n                        <button \n                            className=\"record-button\"\n                            onClick={startRecording}\n                            disabled={isRecording || verificationStatus === 'aborted'}\n                        >\n                            Start Recording\n                        </button>\n                    ) : (\n                        <button \n                            className=\"record-button recording\"\n                            onClick={stopRecording}\n                            disabled={verificationStatus === 'aborted'}\n                        >\n                            Stop Recording\n                        </button>\n                    )}\n                    {recordingComplete && (\n                        <button \n                            className=\"submit-button\"\n                            onClick={handleVoiceVerification}\n                            disabled={verificationStatus === 'aborted'}\n                        >\n                            Submit Voice Recording\n                        </button>\n                    )}\n                </div>\n                {recordingComplete && (\n                    <div className=\"recording-status\">Recording complete! Click submit to verify.</div>\n                )}\n                {voiceMatchStatus && (\n                    <div className={`status-message ${voiceMatchStatus}`}>\n                        {voiceMatchStatus === 'success' \n                            ? 'Voice verification successful!' \n                            : 'Voice verification failed. Please try again.'}\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default Voiceandtextverify;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}